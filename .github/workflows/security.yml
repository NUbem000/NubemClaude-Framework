name: Security Audit

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight
  workflow_dispatch:
  push:
    paths:
      - 'requirements.txt'
      - 'package.json'
      - 'Dockerfile'

jobs:
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Python Security Audit
        uses: pyupio/safety@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
      
      - name: Node Security Audit
        run: |
          npm audit --audit-level=moderate
          npx better-npm-audit audit
      
      - name: Container Security Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: nubemclaude:latest
          args: --severity-threshold=high

  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  compliance:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: OWASP Compliance
        run: |
          docker run --rm -v $(pwd):/src \
            owasp/dependency-check:latest \
            --scan /src \
            --format JSON \
            --out /src/dependency-check-report.json
      
      - name: License Compliance
        uses: fossa-contrib/fossa-action@v2
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

  infrastructure:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        if: hashFiles('**/*.tf') != ''
      
      - name: Kubernetes Security Scan
        uses: kubesec/kubesec-action@v1
        if: hashFiles('**/*.yaml') != ''
        with:
          input: k8s/

  report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, sast, secrets-scan, compliance, infrastructure]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "# Security Audit Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Repository: ${{ github.repository }}" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Summary" >> security-report.md
          echo "All security checks completed." >> security-report.md
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
      
      - name: Notify on Critical Issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Critical security issues detected in ${{ github.repository }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}